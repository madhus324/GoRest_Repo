{
	"info": {
		"_postman_id": "8b64d120-7537-4ce1-a446-bac79282ccad",
		"name": "GoForRest_API_Chaining",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29726022",
		"_collection_link": "https://lunar-desert-696494.postman.co/workspace/46065b15-d4c6-4320-957f-a6b8f0d32ebc/collection/29726022-8b64d120-7537-4ce1-a446-bac79282ccad?action=share&source=collection_link&creator=29726022"
	},
	"item": [
		{
			"name": "GoFor_POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(201)\r",
							"}\r",
							");\r",
							"\r",
							"var jd = JSON.parse(responseBody)\r",
							"\r",
							"pm.collectionVariables.set(\"id_env\", jd.id)\r",
							"\r",
							"console.log(pm.collectionVariables.get(\"id_env\"))\r",
							"\r",
							"//JSON Schema Validate\r",
							"schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"gender\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"gender\",\r",
							"    \"status\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"To Validate JSON Scheme\", function()\r",
							"{\r",
							"    pm.expect(tv4.validate(jd, schema)).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"To validate JSON Body\", ()=>\r",
							"{\r",
							"    pm.expect(jd).to.be.an(\"object\")\r",
							"})\r",
							"\r",
							"pm.test(\"To validate Name\", function()\r",
							"{\r",
							"    pm.expect(jd.name).to.equal(pm.environment.get(\"name_env\"))\r",
							"})\r",
							"\r",
							"pm.test(\"To validate Email\", function()\r",
							"{\r",
							"    pm.expect(jd.email).to.equal(pm.environment.get(\"email_env\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2);\r",
							"\r",
							"var user_email = \"David\" + random + \"@gmail.com\";\r",
							"var user_name = \"David\" + random;\r",
							"\r",
							"pm.environment.set(\"email_env\", user_email);\r",
							"pm.environment.set(\"name_env\", user_name);\r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{name_env}}\", \r\n    \"gender\":\"male\", \r\n    \"email\":\"{{email_env}}\", \r\n    \"status\":\"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gf_url}}/public/v2/users",
					"host": [
						"{{gf_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GoFor_GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jd = JSON.parse(responseBody)\r",
							"//JSON Schema Validate\r",
							"schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"gender\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"gender\",\r",
							"    \"status\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"To Validate JSON Scheme\", function()\r",
							"{\r",
							"    pm.expect(tv4.validate(jd, schema)).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"To validate JSON Body\", ()=>\r",
							"{\r",
							"    pm.expect(jd).to.be.an(\"object\")\r",
							"})\r",
							"\r",
							"pm.test(\"To validate Name\", function()\r",
							"{\r",
							"    pm.expect(jd.name).to.equal(pm.environment.get(\"name_env\"))\r",
							"})\r",
							"\r",
							"pm.test(\"To validate Email\", function()\r",
							"{\r",
							"    pm.expect(jd.email).to.equal(pm.environment.get(\"email_env\"))\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{gf_url}}/public/v2/users/{{id_env}}",
					"host": [
						"{{gf_url}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GoFor_PUT",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2);\r",
							"\r",
							"var user_email = \"David\" + random + \"@gmail.com\";\r",
							"var user_name = \"David\" + random;\r",
							"\r",
							"pm.environment.set(\"email_env\", user_email);\r",
							"pm.environment.set(\"name_env\", user_name);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jd = JSON.parse(responseBody)\r",
							"//JSON Schema Validate\r",
							"schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"gender\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"gender\",\r",
							"    \"status\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"To Validate JSON Scheme\", function()\r",
							"{\r",
							"    pm.expect(tv4.validate(jd, schema)).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"To validate JSON Body\", ()=>\r",
							"{\r",
							"    pm.expect(jd).to.be.an(\"object\")\r",
							"})\r",
							"\r",
							"pm.test(\"To validate Name\", function()\r",
							"{\r",
							"    pm.expect(jd.name).to.equal(pm.environment.get(\"name_env\"))\r",
							"})\r",
							"\r",
							"pm.test(\"To validate Email\", function()\r",
							"{\r",
							"    pm.expect(jd.email).to.equal(pm.environment.get(\"email_env\"))\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n\r\n \r\n\r\n\r\n{\"name\":\"{{name_env}}\", \"email\":\"{{email_env}}\", \"status\":\"active\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gf_url}}/public/v2/users/{{id_env}}",
					"host": [
						"{{gf_url}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id_env}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GoFor_DEL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be with 204\", ()=>\r",
							"{\r",
							"    pm.response.to.have.status(204)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{gf_url}}/public/v2/users/{{id_env}}",
					"host": [
						"{{gf_url}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id_env}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "222be41163dd47942a507430b69f0d984d06f04a364859f24e9a6cce9ff77ccf",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "id_env",
			"value": ""
		}
	]
}